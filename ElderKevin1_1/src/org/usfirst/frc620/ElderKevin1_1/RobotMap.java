// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc620.ElderKevin1_1;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SPI.Port;
import edu.wpi.first.wpilibj.Ultrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon driveTrainTalonRR1;
    public static CANTalon driveTrainTalonRF2;
    public static CANTalon driveTrainTalonLF3;
    public static CANTalon driveTrainTalonLR4;
    public static RobotDrive driveTrainRobotDrive;
    public static Encoder driveTrainEncoderL;
    public static AHRS driveTrainNavX;
    public static Encoder driveTrainEncoderR;
    public static AnalogGyro driveTrainAnalogGyro;
    public static Ultrasonic driveTrainLidar;
    public static CANTalon dOBWindowMotor;
    public static AnalogInput dOBUltrasonic;
    public static Compressor forkliftCompressor;
    public static DoubleSolenoid forkliftTopSolenoid;
    public static DoubleSolenoid forkliftBottomSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainTalonRR1 = new CANTalon(1);
        LiveWindow.addActuator("DriveTrain", "TalonRR1", driveTrainTalonRR1);
        
        driveTrainTalonRF2 = new CANTalon(2);
        LiveWindow.addActuator("DriveTrain", "TalonRF2", driveTrainTalonRF2);
        
        driveTrainTalonLF3 = new CANTalon(3);
        LiveWindow.addActuator("DriveTrain", "TalonLF3", driveTrainTalonLF3);
        
        driveTrainTalonLR4 = new CANTalon(4);
        LiveWindow.addActuator("DriveTrain", "TalonLR4", driveTrainTalonLR4);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainTalonLF3, driveTrainTalonLR4,
              driveTrainTalonRF2, driveTrainTalonRR1);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveTrainEncoderL = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "EncoderL", driveTrainEncoderL);
        driveTrainEncoderL.setDistancePerPulse(1.0);
        driveTrainEncoderL.setPIDSourceType(PIDSourceType.kRate);
        driveTrainNavX = new AHRS(Port.kMXP, (byte)50);
        LiveWindow.addSensor("DriveTrain", "NavX", driveTrainNavX);
        
        driveTrainEncoderR = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "EncoderR", driveTrainEncoderR);
        driveTrainEncoderR.setDistancePerPulse(1.0);
        driveTrainEncoderR.setPIDSourceType(PIDSourceType.kRate);
        driveTrainAnalogGyro = new AnalogGyro(0);
        LiveWindow.addSensor("DriveTrain", "AnalogGyro", driveTrainAnalogGyro);
        driveTrainAnalogGyro.setSensitivity(0.007);
        driveTrainLidar = new Ultrasonic(23, 24);
        LiveWindow.addSensor("DriveTrain", "Lidar", driveTrainLidar);
        
        dOBWindowMotor = new CANTalon(5);
        LiveWindow.addActuator("DOB", "WindowMotor", dOBWindowMotor);
        
        dOBUltrasonic = new AnalogInput(1);
        LiveWindow.addSensor("DOB", "Ultrasonic", dOBUltrasonic);
        
        forkliftCompressor = new Compressor(6);
        
        
        forkliftTopSolenoid = new DoubleSolenoid(6, 1, 0);
        LiveWindow.addActuator("Forklift", "TopSolenoid", forkliftTopSolenoid);
        
        forkliftBottomSolenoid = new DoubleSolenoid(6, 3, 2);
        LiveWindow.addActuator("Forklift", "BottomSolenoid", forkliftBottomSolenoid);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}

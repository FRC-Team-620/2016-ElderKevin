// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc620.ElderKevin1_1.subsystems;

import org.usfirst.frc620.ElderKevin1_1.Robot;
import org.usfirst.frc620.ElderKevin1_1.RobotMap;
import org.usfirst.frc620.ElderKevin1_1.commands.DriveWithJoystick;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.command.Subsystem;
import sun.security.ec.ECDHKeyAgreement;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDSourceType;


/**
 *
 */
public class DriveTrain extends Subsystem {
    private double throttle = 1;
    private int speedlvl = 1;
    private PIDController steerPid;
    private PIDController drivePid;
    double steerKP = 1.0;
    double steerKI = 0.0;
    double steerKD = 0.0;
    double steerTolerance = 1; //FIXME!
    
    double driveKP = 1.0;
    double driveKI = 0.0;
    double driveKD = 0.0;
    double driveTolerance = 1; // FIXME!
    
    private static double turnRate = 0;
    private static double speedRate = 0;
    
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon talonRR1 = RobotMap.driveTrainTalonRR1;
    private final CANTalon talonRF2 = RobotMap.driveTrainTalonRF2;
    private final CANTalon talonLF3 = RobotMap.driveTrainTalonLF3;
    private final CANTalon talonLR4 = RobotMap.driveTrainTalonLR4;
    private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    private final AHRS navX1 = RobotMap.driveTrainNavX1;
    private final Encoder encoderR = RobotMap.driveTrainEncoderR;
    private final Encoder encoderL = RobotMap.driveTrainEncoderL;
    private final AnalogGyro analogGyro = RobotMap.driveTrainAnalogGyro;
    private final Ultrasonic lidar = RobotMap.driveTrainLidar;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public DriveTrain(){
    	PIDOutput steerPidOutput = new PIDOutput() {
			
			@Override
			public void pidWrite(double output) {
				turnRate = output;
			}
		};
		
		PIDOutput drivePidOutput= new PIDOutput() {
			
			@Override
			public void pidWrite(double output) {
				speedRate = output;
			}
		};
		PIDSource encoders = new PIDSource() {
			private Encoder left = RobotMap.driveTrainEncoderL;
			private Encoder right = RobotMap.driveTrainEncoderR;
			
			@Override
			public void setPIDSourceType(PIDSourceType pidSource) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public double pidGet() {
				// TODO Auto-generated method stub
				return (left.getDistance() + right.getDistance())/2;
			}
			
			@Override
			public PIDSourceType getPIDSourceType() {
				// TODO Auto-generated method stub
				return PIDSourceType.kDisplacement;
			}
		};
		
    	steerPid = new PIDController(steerKP, steerKI, steerKD, RobotMap.driveTrainNavX,steerPidOutput); // Start Steer PID
    	
    	steerPid.setInputRange(-180.0, 180.0);
    	steerPid.setOutputRange(-1.0, 1.0);
    	steerPid.setAbsoluteTolerance(steerTolerance);
    	steerPid.setContinuous(true);
    	
    	drivePid = new PIDController(driveKD, driveKI, driveKD, encoders, drivePidOutput); // start drive PID
    	
    	drivePid.setInputRange(-1.0, 1.0);
    	drivePid.setOutputRange(-1.0, 1.0);
    	drivePid.setAbsoluteTolerance(driveTolerance);
    	
    }
    
    public void initDefaultCommand() {
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveWithJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void setSetPoint(double dist, double angle){
    	drivePid.setSetpoint(dist);
    	steerPid.setSetpoint(angle);
    	steerPid.enable();
    	drivePid.enable();
    	
    }
    public void disablePid(){
    	drivePid.disable();
    	steerPid.disable();
    }
    
    public int getSpeedlvl() {
        return speedlvl;
    }
    public void setSpeedlvl(int speedlvl) {
        this.speedlvl = speedlvl;
        switch(speedlvl){
        case -1:
            throttle = 0.6;
            break;
        case 0:
            throttle = 0.8;
            break;
        case 1:
            throttle = 1;
            break;
        default:
            setSpeedlvl(1);
            break;
        }
    }
    public void arcadeDrive(){
    	robotDrive.arcadeDrive(speedRate, turnRate);
    }
    public void arcadeDrive(double speed, double turn) {
        robotDrive.arcadeDrive(speed*throttle, turn);
    }
    public double getYaw(){
        return analogGyro.getAngle();
    }
    public void resetGyro(){
        analogGyro.reset();
    }
}


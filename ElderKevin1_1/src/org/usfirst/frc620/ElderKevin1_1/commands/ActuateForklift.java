// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc620.ElderKevin1_1.commands;

import org.usfirst.frc620.ElderKevin1_1.Robot;
import org.usfirst.frc620.ElderKevin1_1.RobotMap;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class ActuateForklift extends Command {
	private Joystick stick;
    private boolean bottomExtended, topExtended;
    private Timer timer = new Timer();
    private final double DEFAULT_TURN_OFF_TIME = 999999.0;
    private double turnOffBottom = DEFAULT_TURN_OFF_TIME;
    private double turnOffTop = DEFAULT_TURN_OFF_TIME;
    private final double TURN_OFF_TIMEOUT = 1.0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ActuateForklift() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.forklift);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        Robot.forklift.retractBottom();
        Robot.forklift.retractTop();
        stick = Robot.oi.joystick;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if(rTriggerIsPressed() && !bottomExtended) {
        	// Extend bottom and reset the turn off time
            Robot.forklift.extendBottom();
            bottomExtended = true;
            turnOffBottom = DEFAULT_TURN_OFF_TIME;
        } else if (!rTriggerIsPressed() && bottomExtended) {
        	// Retract top and set the turn off time
             Robot.forklift.retractBottom();
             bottomExtended = false;
             turnOffBottom = timer.get() + TURN_OFF_TIMEOUT;
        } else if (!rTriggerIsPressed() && (timer.get() > turnOffBottom)) {
        	// Turn off top and reset the turn off time
        	Robot.forklift.turnOffBottom();
        	turnOffBottom = DEFAULT_TURN_OFF_TIME;
        }

        if(lTriggerIsPressed() && !topExtended) {
        	// Extend top and reset the turn off time
            Robot.forklift.extendTop();
            topExtended = true;
            turnOffTop = DEFAULT_TURN_OFF_TIME;
        } else if(!lTriggerIsPressed() && topExtended) {
        	// Retract top and set the turn off time
            Robot.forklift.retractTop();
            topExtended = false;
            turnOffTop = timer.get() + TURN_OFF_TIMEOUT;
        } else if (!lTriggerIsPressed() && (timer.get() > turnOffTop)) {
        	// Turn off top and reset the turn off time
        	Robot.forklift.turnOffTop();
        	turnOffTop = DEFAULT_TURN_OFF_TIME;
        }


    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }

    private boolean rTriggerIsPressed() {
        return stick.getRawAxis(2) > 0.7;
    }

    private boolean lTriggerIsPressed() {
        return stick.getRawAxis(3) > 0.7;
    }
}

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc620.ElderKevin1_1.commands;

import org.usfirst.frc620.ElderKevin1_1.Robot;
import org.usfirst.frc620.ElderKevin1_1.RobotMap;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class DriveStraight extends Command {

    double distance;
    double speed;
    double dir = 0;
    double currentAngle = 0;
    double lEncoder = 0;
    double rEncoder = 0;
    AnalogGyro gyro = RobotMap.driveTrainAnalogGyro;
    
    static {
        int x = 0;
        x = x + 1;
        //Style points
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveStraight() {

        distance = 1.0;
        speed = 1.0;
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    public DriveStraight(double inches, double speed) {
        this();
        this.distance = inches;
        this.speed = speed;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        dir = gyro.getAngle();
        lEncoder = RobotMap.driveTrainEncoderL.getDistance();
        rEncoder = RobotMap.driveTrainEncoderR.getDistance();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        
        //.007 inches per pulse
        
        currentAngle = gyro.getAngle();
        double turn = dir - currentAngle;
        
        if(turn > 180)
            turn = -(turn - 180);
        if(turn < 180)
            turn = -(turn + 180);
        
        RobotMap.driveTrainRobotDrive.arcadeDrive(1.0, turn/180);
        
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return rEncoder - RobotMap.driveTrainEncoderR.get() > 0.07 * distance && lEncoder - RobotMap.driveTrainEncoderL.get() > 0.07 * distance;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc620.ElderKevin1_1.commands;

import org.usfirst.frc620.ElderKevin1_1.Robot;
import org.usfirst.frc620.ElderKevin1_1.RobotMap;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command; 

/**
 *
 */
public class Expel extends Command {
    private Timer timer = new Timer(); 
//    private double finishTime;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Expel() {
        RobotMap.dOBWindowMotor.setControlMode(0);
        requires(Robot.dOB);
     

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.dOB);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
//    	finishTime = 0.0;
    	timer.reset();
    	timer.start(); 
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        RobotMap.dOBWindowMotor.set(-1); // Actual value TBD
        System.out.println("EXPEL: IN PROGRESS ");
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	// limit of six second run
        if(timer.get() >= 6) {
        	return true;
        }
        /*
        // if sensor reads no ball, set finish time
        if (!Robot.dOB.hasBall()) {
            if (finishTime == 0) {
    			finishTime = timer.get() + 1.0; // extra 1.0s, final value TBD
            }
        }
        // end if finish time has passed
    	if(finishTime != 0 && finishTime <= timer.get()) {
    		return true;
    	}
    	*/
        return false;
//        if(RobotMap.dOBBeamBreak.get()) {  
//        	System.out.println("EXPELLING IS FINISHED");
//            return true;
//        }  
    }

    // Called once after isFinished returns true
    protected void end() {
    	RobotMap.dOBWindowMotor.set(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	RobotMap.dOBWindowMotor.set(0);
    }
}
